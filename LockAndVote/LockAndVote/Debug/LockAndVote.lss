
LockAndVote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00000ce6  00000d7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080010c  0080010c  00000e26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020a5  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00003019  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5a  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00004744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fa  00000000  00000000  0000497c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a35  00000000  00000000  00004e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000068ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 30       	cpi	r26, 0x0C	; 12
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e0       	ldi	r26, 0x0C	; 12
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 31       	cpi	r26, 0x18	; 24
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 03 	call	0x76e	; 0x76e <main>
  8a:	0c 94 71 06 	jmp	0xce2	; 0xce2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:
	while ((UCSRA & (1 << RXC)) == 0x00);// Wait till data is received
	return UDR;		// Return the byte
}
void UART_TxChar(unsigned char data){
	while((UCSRA & (1 << UDRE)) == 0x00);
	UDR = data;
  92:	67 2b       	or	r22, r23
  94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
  96:	df c0       	rjmp	.+446    	; 0x256 <pinChange+0x1c4>
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	21 f4       	brne	.+8      	; 0xa4 <pinChange+0x12>
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	91 05       	cpc	r25, r1
  a8:	21 f4       	brne	.+8      	; 0xb2 <pinChange+0x20>
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	08 95       	ret
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	91 05       	cpc	r25, r1
  b6:	21 f4       	brne	.+8      	; 0xc0 <pinChange+0x2e>
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	8b 7f       	andi	r24, 0xFB	; 251
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	08 95       	ret
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	91 05       	cpc	r25, r1
  c4:	21 f4       	brne	.+8      	; 0xce <pinChange+0x3c>
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	87 7f       	andi	r24, 0xF7	; 247
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	08 95       	ret
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	91 05       	cpc	r25, r1
  d2:	21 f4       	brne	.+8      	; 0xdc <pinChange+0x4a>
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	8f 7e       	andi	r24, 0xEF	; 239
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	08 95       	ret
  dc:	85 30       	cpi	r24, 0x05	; 5
  de:	91 05       	cpc	r25, r1
  e0:	21 f4       	brne	.+8      	; 0xea <pinChange+0x58>
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	8f 7d       	andi	r24, 0xDF	; 223
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	08 95       	ret
  ea:	86 30       	cpi	r24, 0x06	; 6
  ec:	91 05       	cpc	r25, r1
  ee:	21 f4       	brne	.+8      	; 0xf8 <pinChange+0x66>
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	08 95       	ret
  f8:	87 30       	cpi	r24, 0x07	; 7
  fa:	91 05       	cpc	r25, r1
  fc:	21 f4       	brne	.+8      	; 0x106 <pinChange+0x74>
  fe:	8b b3       	in	r24, 0x1b	; 27
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	8b bb       	out	0x1b, r24	; 27
 104:	08 95       	ret
 106:	8a 30       	cpi	r24, 0x0A	; 10
 108:	91 05       	cpc	r25, r1
 10a:	21 f4       	brne	.+8      	; 0x114 <pinChange+0x82>
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	88 bb       	out	0x18, r24	; 24
 112:	08 95       	ret
 114:	8b 30       	cpi	r24, 0x0B	; 11
 116:	91 05       	cpc	r25, r1
 118:	21 f4       	brne	.+8      	; 0x122 <pinChange+0x90>
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
 122:	8c 30       	cpi	r24, 0x0C	; 12
 124:	91 05       	cpc	r25, r1
 126:	21 f4       	brne	.+8      	; 0x130 <pinChange+0x9e>
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	8b 7f       	andi	r24, 0xFB	; 251
 12c:	88 bb       	out	0x18, r24	; 24
 12e:	08 95       	ret
 130:	8d 30       	cpi	r24, 0x0D	; 13
 132:	91 05       	cpc	r25, r1
 134:	21 f4       	brne	.+8      	; 0x13e <pinChange+0xac>
 136:	88 b3       	in	r24, 0x18	; 24
 138:	87 7f       	andi	r24, 0xF7	; 247
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	08 95       	ret
 13e:	8e 30       	cpi	r24, 0x0E	; 14
 140:	91 05       	cpc	r25, r1
 142:	21 f4       	brne	.+8      	; 0x14c <pinChange+0xba>
 144:	88 b3       	in	r24, 0x18	; 24
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	88 bb       	out	0x18, r24	; 24
 14a:	08 95       	ret
 14c:	8f 30       	cpi	r24, 0x0F	; 15
 14e:	91 05       	cpc	r25, r1
 150:	21 f4       	brne	.+8      	; 0x15a <pinChange+0xc8>
 152:	88 b3       	in	r24, 0x18	; 24
 154:	8f 7d       	andi	r24, 0xDF	; 223
 156:	88 bb       	out	0x18, r24	; 24
 158:	08 95       	ret
 15a:	80 31       	cpi	r24, 0x10	; 16
 15c:	91 05       	cpc	r25, r1
 15e:	21 f4       	brne	.+8      	; 0x168 <pinChange+0xd6>
 160:	88 b3       	in	r24, 0x18	; 24
 162:	8f 7b       	andi	r24, 0xBF	; 191
 164:	88 bb       	out	0x18, r24	; 24
 166:	08 95       	ret
 168:	81 31       	cpi	r24, 0x11	; 17
 16a:	91 05       	cpc	r25, r1
 16c:	21 f4       	brne	.+8      	; 0x176 <pinChange+0xe4>
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	8f 77       	andi	r24, 0x7F	; 127
 172:	88 bb       	out	0x18, r24	; 24
 174:	08 95       	ret
 176:	84 31       	cpi	r24, 0x14	; 20
 178:	91 05       	cpc	r25, r1
 17a:	21 f4       	brne	.+8      	; 0x184 <pinChange+0xf2>
 17c:	85 b3       	in	r24, 0x15	; 21
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	85 bb       	out	0x15, r24	; 21
 182:	08 95       	ret
 184:	85 31       	cpi	r24, 0x15	; 21
 186:	91 05       	cpc	r25, r1
 188:	21 f4       	brne	.+8      	; 0x192 <pinChange+0x100>
 18a:	85 b3       	in	r24, 0x15	; 21
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	85 bb       	out	0x15, r24	; 21
 190:	08 95       	ret
 192:	86 31       	cpi	r24, 0x16	; 22
 194:	91 05       	cpc	r25, r1
 196:	21 f4       	brne	.+8      	; 0x1a0 <pinChange+0x10e>
 198:	85 b3       	in	r24, 0x15	; 21
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	08 95       	ret
 1a0:	87 31       	cpi	r24, 0x17	; 23
 1a2:	91 05       	cpc	r25, r1
 1a4:	21 f4       	brne	.+8      	; 0x1ae <pinChange+0x11c>
 1a6:	85 b3       	in	r24, 0x15	; 21
 1a8:	87 7f       	andi	r24, 0xF7	; 247
 1aa:	85 bb       	out	0x15, r24	; 21
 1ac:	08 95       	ret
 1ae:	88 31       	cpi	r24, 0x18	; 24
 1b0:	91 05       	cpc	r25, r1
 1b2:	21 f4       	brne	.+8      	; 0x1bc <pinChange+0x12a>
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	8f 7e       	andi	r24, 0xEF	; 239
 1b8:	85 bb       	out	0x15, r24	; 21
 1ba:	08 95       	ret
 1bc:	89 31       	cpi	r24, 0x19	; 25
 1be:	91 05       	cpc	r25, r1
 1c0:	21 f4       	brne	.+8      	; 0x1ca <pinChange+0x138>
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	08 95       	ret
 1ca:	8a 31       	cpi	r24, 0x1A	; 26
 1cc:	91 05       	cpc	r25, r1
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <pinChange+0x146>
 1d0:	85 b3       	in	r24, 0x15	; 21
 1d2:	8f 7b       	andi	r24, 0xBF	; 191
 1d4:	85 bb       	out	0x15, r24	; 21
 1d6:	08 95       	ret
 1d8:	8b 31       	cpi	r24, 0x1B	; 27
 1da:	91 05       	cpc	r25, r1
 1dc:	21 f4       	brne	.+8      	; 0x1e6 <pinChange+0x154>
 1de:	85 b3       	in	r24, 0x15	; 21
 1e0:	8f 77       	andi	r24, 0x7F	; 127
 1e2:	85 bb       	out	0x15, r24	; 21
 1e4:	08 95       	ret
 1e6:	8e 31       	cpi	r24, 0x1E	; 30
 1e8:	91 05       	cpc	r25, r1
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <pinChange+0x162>
 1ec:	82 b3       	in	r24, 0x12	; 18
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	82 bb       	out	0x12, r24	; 18
 1f2:	08 95       	ret
 1f4:	8f 31       	cpi	r24, 0x1F	; 31
 1f6:	91 05       	cpc	r25, r1
 1f8:	21 f4       	brne	.+8      	; 0x202 <pinChange+0x170>
 1fa:	82 b3       	in	r24, 0x12	; 18
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	82 bb       	out	0x12, r24	; 18
 200:	08 95       	ret
 202:	80 32       	cpi	r24, 0x20	; 32
 204:	91 05       	cpc	r25, r1
 206:	21 f4       	brne	.+8      	; 0x210 <pinChange+0x17e>
 208:	82 b3       	in	r24, 0x12	; 18
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	82 bb       	out	0x12, r24	; 18
 20e:	08 95       	ret
 210:	81 32       	cpi	r24, 0x21	; 33
 212:	91 05       	cpc	r25, r1
 214:	21 f4       	brne	.+8      	; 0x21e <pinChange+0x18c>
 216:	82 b3       	in	r24, 0x12	; 18
 218:	87 7f       	andi	r24, 0xF7	; 247
 21a:	82 bb       	out	0x12, r24	; 18
 21c:	08 95       	ret
 21e:	82 32       	cpi	r24, 0x22	; 34
 220:	91 05       	cpc	r25, r1
 222:	21 f4       	brne	.+8      	; 0x22c <pinChange+0x19a>
 224:	82 b3       	in	r24, 0x12	; 18
 226:	8f 7e       	andi	r24, 0xEF	; 239
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret
 22c:	83 32       	cpi	r24, 0x23	; 35
 22e:	91 05       	cpc	r25, r1
 230:	21 f4       	brne	.+8      	; 0x23a <pinChange+0x1a8>
 232:	82 b3       	in	r24, 0x12	; 18
 234:	8f 7d       	andi	r24, 0xDF	; 223
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	84 32       	cpi	r24, 0x24	; 36
 23c:	91 05       	cpc	r25, r1
 23e:	21 f4       	brne	.+8      	; 0x248 <pinChange+0x1b6>
 240:	82 b3       	in	r24, 0x12	; 18
 242:	8f 7b       	andi	r24, 0xBF	; 191
 244:	82 bb       	out	0x12, r24	; 18
 246:	08 95       	ret
 248:	85 97       	sbiw	r24, 0x25	; 37
 24a:	09 f0       	breq	.+2      	; 0x24e <pinChange+0x1bc>
 24c:	e1 c0       	rjmp	.+450    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 24e:	82 b3       	in	r24, 0x12	; 18
 250:	8f 77       	andi	r24, 0x7F	; 127
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	21 f4       	brne	.+8      	; 0x262 <pinChange+0x1d0>
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	8b bb       	out	0x1b, r24	; 27
 260:	08 95       	ret
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	91 05       	cpc	r25, r1
 266:	21 f4       	brne	.+8      	; 0x270 <pinChange+0x1de>
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	8b bb       	out	0x1b, r24	; 27
 26e:	08 95       	ret
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	91 05       	cpc	r25, r1
 274:	21 f4       	brne	.+8      	; 0x27e <pinChange+0x1ec>
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	8b bb       	out	0x1b, r24	; 27
 27c:	08 95       	ret
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	91 05       	cpc	r25, r1
 282:	21 f4       	brne	.+8      	; 0x28c <pinChange+0x1fa>
 284:	8b b3       	in	r24, 0x1b	; 27
 286:	88 60       	ori	r24, 0x08	; 8
 288:	8b bb       	out	0x1b, r24	; 27
 28a:	08 95       	ret
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	91 05       	cpc	r25, r1
 290:	21 f4       	brne	.+8      	; 0x29a <pinChange+0x208>
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	80 61       	ori	r24, 0x10	; 16
 296:	8b bb       	out	0x1b, r24	; 27
 298:	08 95       	ret
 29a:	85 30       	cpi	r24, 0x05	; 5
 29c:	91 05       	cpc	r25, r1
 29e:	21 f4       	brne	.+8      	; 0x2a8 <pinChange+0x216>
 2a0:	8b b3       	in	r24, 0x1b	; 27
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	8b bb       	out	0x1b, r24	; 27
 2a6:	08 95       	ret
 2a8:	86 30       	cpi	r24, 0x06	; 6
 2aa:	91 05       	cpc	r25, r1
 2ac:	21 f4       	brne	.+8      	; 0x2b6 <pinChange+0x224>
 2ae:	8b b3       	in	r24, 0x1b	; 27
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	8b bb       	out	0x1b, r24	; 27
 2b4:	08 95       	ret
 2b6:	87 30       	cpi	r24, 0x07	; 7
 2b8:	91 05       	cpc	r25, r1
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <pinChange+0x232>
 2bc:	8b b3       	in	r24, 0x1b	; 27
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	8b bb       	out	0x1b, r24	; 27
 2c2:	08 95       	ret
 2c4:	8a 30       	cpi	r24, 0x0A	; 10
 2c6:	91 05       	cpc	r25, r1
 2c8:	21 f4       	brne	.+8      	; 0x2d2 <pinChange+0x240>
 2ca:	88 b3       	in	r24, 0x18	; 24
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	88 bb       	out	0x18, r24	; 24
 2d0:	08 95       	ret
 2d2:	8b 30       	cpi	r24, 0x0B	; 11
 2d4:	91 05       	cpc	r25, r1
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <pinChange+0x24e>
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	88 bb       	out	0x18, r24	; 24
 2de:	08 95       	ret
 2e0:	8c 30       	cpi	r24, 0x0C	; 12
 2e2:	91 05       	cpc	r25, r1
 2e4:	21 f4       	brne	.+8      	; 0x2ee <pinChange+0x25c>
 2e6:	88 b3       	in	r24, 0x18	; 24
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	88 bb       	out	0x18, r24	; 24
 2ec:	08 95       	ret
 2ee:	8d 30       	cpi	r24, 0x0D	; 13
 2f0:	91 05       	cpc	r25, r1
 2f2:	21 f4       	brne	.+8      	; 0x2fc <pinChange+0x26a>
 2f4:	88 b3       	in	r24, 0x18	; 24
 2f6:	88 60       	ori	r24, 0x08	; 8
 2f8:	88 bb       	out	0x18, r24	; 24
 2fa:	08 95       	ret
 2fc:	8e 30       	cpi	r24, 0x0E	; 14
 2fe:	91 05       	cpc	r25, r1
 300:	21 f4       	brne	.+8      	; 0x30a <pinChange+0x278>
 302:	88 b3       	in	r24, 0x18	; 24
 304:	80 61       	ori	r24, 0x10	; 16
 306:	88 bb       	out	0x18, r24	; 24
 308:	08 95       	ret
 30a:	8f 30       	cpi	r24, 0x0F	; 15
 30c:	91 05       	cpc	r25, r1
 30e:	21 f4       	brne	.+8      	; 0x318 <pinChange+0x286>
 310:	88 b3       	in	r24, 0x18	; 24
 312:	80 62       	ori	r24, 0x20	; 32
 314:	88 bb       	out	0x18, r24	; 24
 316:	08 95       	ret
 318:	80 31       	cpi	r24, 0x10	; 16
 31a:	91 05       	cpc	r25, r1
 31c:	21 f4       	brne	.+8      	; 0x326 <pinChange+0x294>
 31e:	88 b3       	in	r24, 0x18	; 24
 320:	80 64       	ori	r24, 0x40	; 64
 322:	88 bb       	out	0x18, r24	; 24
 324:	08 95       	ret
 326:	81 31       	cpi	r24, 0x11	; 17
 328:	91 05       	cpc	r25, r1
 32a:	21 f4       	brne	.+8      	; 0x334 <pinChange+0x2a2>
 32c:	88 b3       	in	r24, 0x18	; 24
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	88 bb       	out	0x18, r24	; 24
 332:	08 95       	ret
 334:	84 31       	cpi	r24, 0x14	; 20
 336:	91 05       	cpc	r25, r1
 338:	21 f4       	brne	.+8      	; 0x342 <pinChange+0x2b0>
 33a:	85 b3       	in	r24, 0x15	; 21
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	85 bb       	out	0x15, r24	; 21
 340:	08 95       	ret
 342:	85 31       	cpi	r24, 0x15	; 21
 344:	91 05       	cpc	r25, r1
 346:	21 f4       	brne	.+8      	; 0x350 <pinChange+0x2be>
 348:	85 b3       	in	r24, 0x15	; 21
 34a:	82 60       	ori	r24, 0x02	; 2
 34c:	85 bb       	out	0x15, r24	; 21
 34e:	08 95       	ret
 350:	86 31       	cpi	r24, 0x16	; 22
 352:	91 05       	cpc	r25, r1
 354:	21 f4       	brne	.+8      	; 0x35e <pinChange+0x2cc>
 356:	85 b3       	in	r24, 0x15	; 21
 358:	84 60       	ori	r24, 0x04	; 4
 35a:	85 bb       	out	0x15, r24	; 21
 35c:	08 95       	ret
 35e:	87 31       	cpi	r24, 0x17	; 23
 360:	91 05       	cpc	r25, r1
 362:	21 f4       	brne	.+8      	; 0x36c <pinChange+0x2da>
 364:	85 b3       	in	r24, 0x15	; 21
 366:	88 60       	ori	r24, 0x08	; 8
 368:	85 bb       	out	0x15, r24	; 21
 36a:	08 95       	ret
 36c:	88 31       	cpi	r24, 0x18	; 24
 36e:	91 05       	cpc	r25, r1
 370:	21 f4       	brne	.+8      	; 0x37a <pinChange+0x2e8>
 372:	85 b3       	in	r24, 0x15	; 21
 374:	80 61       	ori	r24, 0x10	; 16
 376:	85 bb       	out	0x15, r24	; 21
 378:	08 95       	ret
 37a:	89 31       	cpi	r24, 0x19	; 25
 37c:	91 05       	cpc	r25, r1
 37e:	21 f4       	brne	.+8      	; 0x388 <pinChange+0x2f6>
 380:	85 b3       	in	r24, 0x15	; 21
 382:	80 62       	ori	r24, 0x20	; 32
 384:	85 bb       	out	0x15, r24	; 21
 386:	08 95       	ret
 388:	8a 31       	cpi	r24, 0x1A	; 26
 38a:	91 05       	cpc	r25, r1
 38c:	21 f4       	brne	.+8      	; 0x396 <pinChange+0x304>
 38e:	85 b3       	in	r24, 0x15	; 21
 390:	80 64       	ori	r24, 0x40	; 64
 392:	85 bb       	out	0x15, r24	; 21
 394:	08 95       	ret
 396:	8b 31       	cpi	r24, 0x1B	; 27
 398:	91 05       	cpc	r25, r1
 39a:	21 f4       	brne	.+8      	; 0x3a4 <pinChange+0x312>
 39c:	85 b3       	in	r24, 0x15	; 21
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	85 bb       	out	0x15, r24	; 21
 3a2:	08 95       	ret
 3a4:	8e 31       	cpi	r24, 0x1E	; 30
 3a6:	91 05       	cpc	r25, r1
 3a8:	21 f4       	brne	.+8      	; 0x3b2 <pinChange+0x320>
 3aa:	82 b3       	in	r24, 0x12	; 18
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	82 bb       	out	0x12, r24	; 18
 3b0:	08 95       	ret
 3b2:	8f 31       	cpi	r24, 0x1F	; 31
 3b4:	91 05       	cpc	r25, r1
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <pinChange+0x32e>
 3b8:	82 b3       	in	r24, 0x12	; 18
 3ba:	82 60       	ori	r24, 0x02	; 2
 3bc:	82 bb       	out	0x12, r24	; 18
 3be:	08 95       	ret
 3c0:	80 32       	cpi	r24, 0x20	; 32
 3c2:	91 05       	cpc	r25, r1
 3c4:	21 f4       	brne	.+8      	; 0x3ce <pinChange+0x33c>
 3c6:	82 b3       	in	r24, 0x12	; 18
 3c8:	84 60       	ori	r24, 0x04	; 4
 3ca:	82 bb       	out	0x12, r24	; 18
 3cc:	08 95       	ret
 3ce:	81 32       	cpi	r24, 0x21	; 33
 3d0:	91 05       	cpc	r25, r1
 3d2:	21 f4       	brne	.+8      	; 0x3dc <pinChange+0x34a>
 3d4:	82 b3       	in	r24, 0x12	; 18
 3d6:	88 60       	ori	r24, 0x08	; 8
 3d8:	82 bb       	out	0x12, r24	; 18
 3da:	08 95       	ret
 3dc:	82 32       	cpi	r24, 0x22	; 34
 3de:	91 05       	cpc	r25, r1
 3e0:	21 f4       	brne	.+8      	; 0x3ea <pinChange+0x358>
 3e2:	82 b3       	in	r24, 0x12	; 18
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	82 bb       	out	0x12, r24	; 18
 3e8:	08 95       	ret
 3ea:	83 32       	cpi	r24, 0x23	; 35
 3ec:	91 05       	cpc	r25, r1
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <pinChange+0x366>
 3f0:	82 b3       	in	r24, 0x12	; 18
 3f2:	80 62       	ori	r24, 0x20	; 32
 3f4:	82 bb       	out	0x12, r24	; 18
 3f6:	08 95       	ret
 3f8:	84 32       	cpi	r24, 0x24	; 36
 3fa:	91 05       	cpc	r25, r1
 3fc:	21 f4       	brne	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	82 b3       	in	r24, 0x12	; 18
 400:	80 64       	ori	r24, 0x40	; 64
 402:	82 bb       	out	0x12, r24	; 18
 404:	08 95       	ret
 406:	85 97       	sbiw	r24, 0x25	; 37
 408:	19 f4       	brne	.+6      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40a:	82 b3       	in	r24, 0x12	; 18
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	82 bb       	out	0x12, r24	; 18
 410:	08 95       	ret

00000412 <Lcd4_Port>:
 412:	cf 93       	push	r28
 414:	c8 2f       	mov	r28, r24
 416:	80 ff       	sbrs	r24, 0
 418:	07 c0       	rjmp	.+14     	; 0x428 <Lcd4_Port+0x16>
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	82 e2       	ldi	r24, 0x22	; 34
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 426:	06 c0       	rjmp	.+12     	; 0x434 <Lcd4_Port+0x22>
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	82 e2       	ldi	r24, 0x22	; 34
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 434:	c1 ff       	sbrs	r28, 1
 436:	07 c0       	rjmp	.+14     	; 0x446 <Lcd4_Port+0x34>
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	83 e2       	ldi	r24, 0x23	; 35
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 444:	06 c0       	rjmp	.+12     	; 0x452 <Lcd4_Port+0x40>
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	83 e2       	ldi	r24, 0x23	; 35
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 452:	c2 ff       	sbrs	r28, 2
 454:	07 c0       	rjmp	.+14     	; 0x464 <Lcd4_Port+0x52>
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	84 e2       	ldi	r24, 0x24	; 36
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 462:	06 c0       	rjmp	.+12     	; 0x470 <Lcd4_Port+0x5e>
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	84 e2       	ldi	r24, 0x24	; 36
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 470:	c3 ff       	sbrs	r28, 3
 472:	07 c0       	rjmp	.+14     	; 0x482 <Lcd4_Port+0x70>
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	85 e2       	ldi	r24, 0x25	; 37
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 480:	06 c0       	rjmp	.+12     	; 0x48e <Lcd4_Port+0x7c>
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	85 e2       	ldi	r24, 0x25	; 37
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <Lcd4_Cmd>:
 492:	cf 93       	push	r28
 494:	c8 2f       	mov	r28, r24
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	8a e1       	ldi	r24, 0x1A	; 26
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4a2:	8c 2f       	mov	r24, r28
 4a4:	0e 94 09 02 	call	0x412	; 0x412 <Lcd4_Port>
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	8b e1       	ldi	r24, 0x1B	; 27
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4b4:	89 ef       	ldi	r24, 0xF9	; 249
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <Lcd4_Cmd+0x26>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <Lcd4_Cmd+0x2c>
 4be:	00 00       	nop
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	8b e1       	ldi	r24, 0x1B	; 27
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4cc:	89 ef       	ldi	r24, 0xF9	; 249
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <Lcd4_Cmd+0x3e>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <Lcd4_Cmd+0x44>
 4d6:	00 00       	nop
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <Lcd4_Clear>:
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 4e8:	08 95       	ret

000004ea <Lcd4_Set_Cursor>:
 4ea:	cf 93       	push	r28
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	61 f4       	brne	.+24     	; 0x508 <Lcd4_Set_Cursor+0x1e>
 4f0:	80 e8       	ldi	r24, 0x80	; 128
 4f2:	86 0f       	add	r24, r22
 4f4:	c6 2f       	mov	r28, r22
 4f6:	cf 70       	andi	r28, 0x0F	; 15
 4f8:	82 95       	swap	r24
 4fa:	8f 70       	andi	r24, 0x0F	; 15
 4fc:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 500:	8c 2f       	mov	r24, r28
 502:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 506:	0d c0       	rjmp	.+26     	; 0x522 <Lcd4_Set_Cursor+0x38>
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	59 f4       	brne	.+22     	; 0x522 <Lcd4_Set_Cursor+0x38>
 50c:	80 ec       	ldi	r24, 0xC0	; 192
 50e:	86 0f       	add	r24, r22
 510:	c6 2f       	mov	r28, r22
 512:	cf 70       	andi	r28, 0x0F	; 15
 514:	82 95       	swap	r24
 516:	8f 70       	andi	r24, 0x0F	; 15
 518:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 51c:	8c 2f       	mov	r24, r28
 51e:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <Lcd4_Init>:
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 09 02 	call	0x412	; 0x412 <Lcd4_Port>
 52c:	87 e8       	ldi	r24, 0x87	; 135
 52e:	93 e1       	ldi	r25, 0x13	; 19
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <Lcd4_Init+0xa>
 534:	00 c0       	rjmp	.+0      	; 0x536 <Lcd4_Init+0x10>
 536:	00 00       	nop
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 53e:	81 ee       	ldi	r24, 0xE1	; 225
 540:	94 e0       	ldi	r25, 0x04	; 4
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <Lcd4_Init+0x1c>
 546:	00 c0       	rjmp	.+0      	; 0x548 <Lcd4_Init+0x22>
 548:	00 00       	nop
 54a:	83 e0       	ldi	r24, 0x03	; 3
 54c:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 550:	8d eb       	ldi	r24, 0xBD	; 189
 552:	9a e0       	ldi	r25, 0x0A	; 10
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <Lcd4_Init+0x2e>
 558:	00 c0       	rjmp	.+0      	; 0x55a <Lcd4_Init+0x34>
 55a:	00 00       	nop
 55c:	83 e0       	ldi	r24, 0x03	; 3
 55e:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 56e:	88 e0       	ldi	r24, 0x08	; 8
 570:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 57a:	8c e0       	ldi	r24, 0x0C	; 12
 57c:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 58c:	08 95       	ret

0000058e <Lcd4_Write_Char>:
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	d8 2f       	mov	r29, r24
 594:	df 70       	andi	r29, 0x0F	; 15
 596:	c8 2f       	mov	r28, r24
 598:	c0 7f       	andi	r28, 0xF0	; 240
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	8a e1       	ldi	r24, 0x1A	; 26
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 5a6:	8c 2f       	mov	r24, r28
 5a8:	82 95       	swap	r24
 5aa:	8f 70       	andi	r24, 0x0F	; 15
 5ac:	0e 94 09 02 	call	0x412	; 0x412 <Lcd4_Port>
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	8b e1       	ldi	r24, 0x1B	; 27
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 5bc:	89 ef       	ldi	r24, 0xF9	; 249
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <Lcd4_Write_Char+0x32>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <Lcd4_Write_Char+0x38>
 5c6:	00 00       	nop
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	8b e1       	ldi	r24, 0x1B	; 27
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 5d4:	89 ef       	ldi	r24, 0xF9	; 249
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <Lcd4_Write_Char+0x4a>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <Lcd4_Write_Char+0x50>
 5de:	00 00       	nop
 5e0:	8d 2f       	mov	r24, r29
 5e2:	0e 94 09 02 	call	0x412	; 0x412 <Lcd4_Port>
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	8b e1       	ldi	r24, 0x1B	; 27
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 5f2:	89 ef       	ldi	r24, 0xF9	; 249
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <Lcd4_Write_Char+0x68>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <Lcd4_Write_Char+0x6e>
 5fc:	00 00       	nop
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	8b e1       	ldi	r24, 0x1B	; 27
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 60a:	89 ef       	ldi	r24, 0xF9	; 249
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <Lcd4_Write_Char+0x80>
 612:	00 c0       	rjmp	.+0      	; 0x614 <Lcd4_Write_Char+0x86>
 614:	00 00       	nop
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <Lcd4_Write_String>:
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	8c 01       	movw	r16, r24
 626:	c0 e0       	ldi	r28, 0x00	; 0
 628:	d0 e0       	ldi	r29, 0x00	; 0
 62a:	03 c0       	rjmp	.+6      	; 0x632 <Lcd4_Write_String+0x16>
 62c:	0e 94 c7 02 	call	0x58e	; 0x58e <Lcd4_Write_Char>
 630:	21 96       	adiw	r28, 0x01	; 1
 632:	f8 01       	movw	r30, r16
 634:	ec 0f       	add	r30, r28
 636:	fd 1f       	adc	r31, r29
 638:	80 81       	ld	r24, Z
 63a:	81 11       	cpse	r24, r1
 63c:	f7 cf       	rjmp	.-18     	; 0x62c <Lcd4_Write_String+0x10>
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	08 95       	ret

00000648 <Lcd4_Shift_Left>:
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 64e:	88 e0       	ldi	r24, 0x08	; 8
 650:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Cmd>
 654:	08 95       	ret

00000656 <UART_init>:
 656:	88 e1       	ldi	r24, 0x18	; 24
 658:	8a b9       	out	0x0a, r24	; 10
 65a:	86 e8       	ldi	r24, 0x86	; 134
 65c:	80 bd       	out	0x20, r24	; 32
 65e:	1b b8       	out	0x0b, r1	; 11
 660:	8b b1       	in	r24, 0x0b	; 11
 662:	80 6c       	ori	r24, 0xC0	; 192
 664:	8b b9       	out	0x0b, r24	; 11
 666:	89 e1       	ldi	r24, 0x19	; 25
 668:	89 b9       	out	0x09, r24	; 9
 66a:	10 bc       	out	0x20, r1	; 32
 66c:	08 95       	ret

0000066e <UART_RxChar>:
 66e:	5f 9b       	sbis	0x0b, 7	; 11
 670:	fe cf       	rjmp	.-4      	; 0x66e <UART_RxChar>
 672:	8c b1       	in	r24, 0x0c	; 12
 674:	08 95       	ret

00000676 <get_key>:
	
}
char get_key(){
	
	PORTB |= 1;
 676:	88 b3       	in	r24, 0x18	; 24
 678:	81 60       	ori	r24, 0x01	; 1
 67a:	88 bb       	out	0x18, r24	; 24
	if(PINB & (1 << PINB3)){PORTB &= ~(1);return '1';}
 67c:	b3 9b       	sbis	0x16, 3	; 22
 67e:	05 c0       	rjmp	.+10     	; 0x68a <get_key+0x14>
 680:	88 b3       	in	r24, 0x18	; 24
 682:	8e 7f       	andi	r24, 0xFE	; 254
 684:	88 bb       	out	0x18, r24	; 24
 686:	81 e3       	ldi	r24, 0x31	; 49
 688:	08 95       	ret
	else if(PINB & (1 << PINB4)){PORTB &= ~(1);return '4';}
 68a:	b4 9b       	sbis	0x16, 4	; 22
 68c:	05 c0       	rjmp	.+10     	; 0x698 <get_key+0x22>
 68e:	88 b3       	in	r24, 0x18	; 24
 690:	8e 7f       	andi	r24, 0xFE	; 254
 692:	88 bb       	out	0x18, r24	; 24
 694:	84 e3       	ldi	r24, 0x34	; 52
 696:	08 95       	ret
	else if(PINB & (1 << PINB5)){PORTB &= ~(1);return '7';}
 698:	b5 9b       	sbis	0x16, 5	; 22
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <get_key+0x30>
 69c:	88 b3       	in	r24, 0x18	; 24
 69e:	8e 7f       	andi	r24, 0xFE	; 254
 6a0:	88 bb       	out	0x18, r24	; 24
 6a2:	87 e3       	ldi	r24, 0x37	; 55
 6a4:	08 95       	ret
	else if(PINB & (1 << PINB6)){PORTB &= ~(1);return '*';}
 6a6:	b6 9b       	sbis	0x16, 6	; 22
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <get_key+0x3e>
 6aa:	88 b3       	in	r24, 0x18	; 24
 6ac:	8e 7f       	andi	r24, 0xFE	; 254
 6ae:	88 bb       	out	0x18, r24	; 24
 6b0:	8a e2       	ldi	r24, 0x2A	; 42
 6b2:	08 95       	ret
	PORTB &= ~(1);
 6b4:	88 b3       	in	r24, 0x18	; 24
 6b6:	8e 7f       	andi	r24, 0xFE	; 254
 6b8:	88 bb       	out	0x18, r24	; 24
	
	PORTB |= 2;
 6ba:	88 b3       	in	r24, 0x18	; 24
 6bc:	82 60       	ori	r24, 0x02	; 2
 6be:	88 bb       	out	0x18, r24	; 24
	if(PINB & (1 << PINB3)){PORTB &= ~(2); return '2';}
 6c0:	b3 9b       	sbis	0x16, 3	; 22
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <get_key+0x58>
 6c4:	88 b3       	in	r24, 0x18	; 24
 6c6:	8d 7f       	andi	r24, 0xFD	; 253
 6c8:	88 bb       	out	0x18, r24	; 24
 6ca:	82 e3       	ldi	r24, 0x32	; 50
 6cc:	08 95       	ret
	else if(PINB & (1 << PINB4)){PORTB &= ~(2); return '5';}
 6ce:	b4 9b       	sbis	0x16, 4	; 22
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <get_key+0x66>
 6d2:	88 b3       	in	r24, 0x18	; 24
 6d4:	8d 7f       	andi	r24, 0xFD	; 253
 6d6:	88 bb       	out	0x18, r24	; 24
 6d8:	85 e3       	ldi	r24, 0x35	; 53
 6da:	08 95       	ret
	else if(PINB & (1 << PINB5)){PORTB &= ~(2); return '8';}
 6dc:	b5 9b       	sbis	0x16, 5	; 22
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <get_key+0x74>
 6e0:	88 b3       	in	r24, 0x18	; 24
 6e2:	8d 7f       	andi	r24, 0xFD	; 253
 6e4:	88 bb       	out	0x18, r24	; 24
 6e6:	88 e3       	ldi	r24, 0x38	; 56
 6e8:	08 95       	ret
	else if(PINB & (1 << PINB6)){PORTB &= ~(2); return '0';}
 6ea:	b6 9b       	sbis	0x16, 6	; 22
 6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <get_key+0x82>
 6ee:	88 b3       	in	r24, 0x18	; 24
 6f0:	8d 7f       	andi	r24, 0xFD	; 253
 6f2:	88 bb       	out	0x18, r24	; 24
 6f4:	80 e3       	ldi	r24, 0x30	; 48
 6f6:	08 95       	ret
	PORTB &= ~(2);
 6f8:	88 b3       	in	r24, 0x18	; 24
 6fa:	8d 7f       	andi	r24, 0xFD	; 253
 6fc:	88 bb       	out	0x18, r24	; 24
	
	PORTB |= 4;
 6fe:	88 b3       	in	r24, 0x18	; 24
 700:	84 60       	ori	r24, 0x04	; 4
 702:	88 bb       	out	0x18, r24	; 24
	if(PINB & (1 << PINB3)){PORTB &= ~(4); return '3';}
 704:	b3 9b       	sbis	0x16, 3	; 22
 706:	05 c0       	rjmp	.+10     	; 0x712 <get_key+0x9c>
 708:	88 b3       	in	r24, 0x18	; 24
 70a:	8b 7f       	andi	r24, 0xFB	; 251
 70c:	88 bb       	out	0x18, r24	; 24
 70e:	83 e3       	ldi	r24, 0x33	; 51
 710:	08 95       	ret
	else if(PINB & (1 << PINB4)){PORTB &= ~(4); return '6';}
 712:	b4 9b       	sbis	0x16, 4	; 22
 714:	05 c0       	rjmp	.+10     	; 0x720 <get_key+0xaa>
 716:	88 b3       	in	r24, 0x18	; 24
 718:	8b 7f       	andi	r24, 0xFB	; 251
 71a:	88 bb       	out	0x18, r24	; 24
 71c:	86 e3       	ldi	r24, 0x36	; 54
 71e:	08 95       	ret
	else if(PINB & (1 << PINB5)){PORTB &= ~(4); return '9';}
 720:	b5 9b       	sbis	0x16, 5	; 22
 722:	05 c0       	rjmp	.+10     	; 0x72e <get_key+0xb8>
 724:	88 b3       	in	r24, 0x18	; 24
 726:	8b 7f       	andi	r24, 0xFB	; 251
 728:	88 bb       	out	0x18, r24	; 24
 72a:	89 e3       	ldi	r24, 0x39	; 57
 72c:	08 95       	ret
	else if(PINB & (1 << PINB6)){PORTB &= ~(4); return '#';}
 72e:	b6 9b       	sbis	0x16, 6	; 22
 730:	05 c0       	rjmp	.+10     	; 0x73c <get_key+0xc6>
 732:	88 b3       	in	r24, 0x18	; 24
 734:	8b 7f       	andi	r24, 0xFB	; 251
 736:	88 bb       	out	0x18, r24	; 24
 738:	83 e2       	ldi	r24, 0x23	; 35
 73a:	08 95       	ret
	
	PORTB &= ~(4);
 73c:	88 b3       	in	r24, 0x18	; 24
 73e:	8b 7f       	andi	r24, 0xFB	; 251
 740:	88 bb       	out	0x18, r24	; 24
	
	return 0;
 742:	80 e0       	ldi	r24, 0x00	; 0
}
 744:	08 95       	ret

00000746 <__vector_2>:
int count_c = 0;
int count_d = 0;
char* buff;

volatile int end = 0;
ISR(INT1_vect){
 746:	1f 92       	push	r1
 748:	0f 92       	push	r0
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	0f 92       	push	r0
 74e:	11 24       	eor	r1, r1
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
	
	end = 1; 
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 75c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>

}
 760:	9f 91       	pop	r25
 762:	8f 91       	pop	r24
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <main>:

int main(void)
{	
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
 77a:	2c 97       	sbiw	r28, 0x0c	; 12
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	f8 94       	cli
 780:	de bf       	out	0x3e, r29	; 62
 782:	0f be       	out	0x3f, r0	; 63
 784:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b11110110;
 786:	86 ef       	ldi	r24, 0xF6	; 246
 788:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00000111;
 78a:	87 e0       	ldi	r24, 0x07	; 7
 78c:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	84 bb       	out	0x14, r24	; 20

	//INTERRUPT
	GICR = (1<<INT1); //STEP3
 792:	80 e8       	ldi	r24, 0x80	; 128
 794:	8b bf       	out	0x3b, r24	; 59
	MCUCR = MCUCR & 0b11110011;//STEP4
 796:	85 b7       	in	r24, 0x35	; 53
 798:	83 7f       	andi	r24, 0xF3	; 243
 79a:	85 bf       	out	0x35, r24	; 53
	sei();
 79c:	78 94       	sei
	
	UART_init();
 79e:	0e 94 2b 03 	call	0x656	; 0x656 <UART_init>
	unsigned char lock[4];
	//Lcd4_Init();
	unsigned char lock_in[4];
	unsigned char admin_lock[4] = {'8','8','8','8'};
 7a2:	88 e3       	ldi	r24, 0x38	; 56
 7a4:	89 87       	std	Y+9, r24	; 0x09
 7a6:	8a 87       	std	Y+10, r24	; 0x0a
 7a8:	8b 87       	std	Y+11, r24	; 0x0b
 7aa:	8c 87       	std	Y+12, r24	; 0x0c
	int count = 0;
 7ac:	00 e0       	ldi	r16, 0x00	; 0
 7ae:	10 e0       	ldi	r17, 0x00	; 0
	
    /* Replace with your application code */
    while (1) 
    {
		
		if(!end){
 7b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 7b4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 7b8:	89 2b       	or	r24, r25
 7ba:	91 f0       	breq	.+36     	; 0x7e0 <main+0x72>
 7bc:	2f c1       	rjmp	.+606    	; 0xa1c <__stack+0x1bd>
		
		while(count < 4){
			lock[count] = UART_RxChar();
 7be:	0e 94 37 03 	call	0x66e	; 0x66e <UART_RxChar>
 7c2:	e1 e0       	ldi	r30, 0x01	; 1
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	ec 0f       	add	r30, r28
 7c8:	fd 1f       	adc	r31, r29
 7ca:	e0 0f       	add	r30, r16
 7cc:	f1 1f       	adc	r31, r17
 7ce:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d0:	8f e4       	ldi	r24, 0x4F	; 79
 7d2:	93 ec       	ldi	r25, 0xC3	; 195
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <main+0x66>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <main+0x6c>
 7da:	00 00       	nop
			//Lcd4_Write_Char(lock[count]);
			_delay_ms(200);
			count++;
 7dc:	0f 5f       	subi	r16, 0xFF	; 255
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
    while (1) 
    {
		
		if(!end){
		
		while(count < 4){
 7e0:	04 30       	cpi	r16, 0x04	; 4
 7e2:	11 05       	cpc	r17, r1
 7e4:	64 f3       	brlt	.-40     	; 0x7be <main+0x50>
			//Lcd4_Write_Char(lock[count]);
			_delay_ms(200);
			count++;
		}
		
		if(PINB & (1<<PINB7)){ // IF MOTION IS DETECTED
 7e6:	b7 9b       	sbis	0x16, 7	; 22
 7e8:	e3 cf       	rjmp	.-58     	; 0x7b0 <main+0x42>
 7ea:	87 ea       	ldi	r24, 0xA7	; 167
 7ec:	91 e6       	ldi	r25, 0x61	; 97
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <main+0x80>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <main+0x86>
 7f4:	00 00       	nop
			_delay_ms(100);
			Lcd4_Init();
 7f6:	0e 94 93 02 	call	0x526	; 0x526 <Lcd4_Init>
			Lcd4_Write_String("Motion Detected!");
 7fa:	80 e6       	ldi	r24, 0x60	; 96
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
 802:	9f e3       	ldi	r25, 0x3F	; 63
 804:	2d e0       	ldi	r18, 0x0D	; 13
 806:	83 e0       	ldi	r24, 0x03	; 3
 808:	91 50       	subi	r25, 0x01	; 1
 80a:	20 40       	sbci	r18, 0x00	; 0
 80c:	80 40       	sbci	r24, 0x00	; 0
 80e:	e1 f7       	brne	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	00 c0       	rjmp	.+0      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 812:	00 00       	nop
			_delay_ms(1000);
			Lcd4_Clear();
 814:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
 818:	9f e9       	ldi	r25, 0x9F	; 159
 81a:	26 e8       	ldi	r18, 0x86	; 134
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	91 50       	subi	r25, 0x01	; 1
 820:	20 40       	sbci	r18, 0x00	; 0
 822:	80 40       	sbci	r24, 0x00	; 0
 824:	e1 f7       	brne	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 828:	00 00       	nop
				Lcd4_Write_Char(lock[count]);
				_delay_ms(100);
				count++;
			}*/
			_delay_ms(500);
			Lcd4_Clear();
 82a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
			/*Lcd4_Write_String("Input your unique passcode now");
			for(int i = 0; i<16; i++){
				_delay_ms(100);
				Lcd4_Shift_Left();
			}*/
			Lcd4_Clear();
 82e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
			Lcd4_Write_String("Your Passcode: ");
 832:	81 e7       	ldi	r24, 0x71	; 113
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
			Lcd4_Set_Cursor(2, 0);
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	0e 94 75 02 	call	0x4ea	; 0x4ea <Lcd4_Set_Cursor>
 842:	8f e4       	ldi	r24, 0x4F	; 79
 844:	93 ec       	ldi	r25, 0xC3	; 195
 846:	01 97       	sbiw	r24, 0x01	; 1
 848:	f1 f7       	brne	.-4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84a:	00 c0       	rjmp	.+0      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 84c:	00 00       	nop
 84e:	00 e0       	ldi	r16, 0x00	; 0
 850:	10 e0       	ldi	r17, 0x00	; 0
 852:	1a c0       	rjmp	.+52     	; 0x888 <__stack+0x29>
			_delay_ms(200);
			
			while(input_pass < 4){
				if(get_key() != 0){
 854:	0e 94 3b 03 	call	0x676	; 0x676 <get_key>
 858:	88 23       	and	r24, r24
 85a:	b1 f0       	breq	.+44     	; 0x888 <__stack+0x29>
					lock_in[input_pass] = get_key();
 85c:	0e 94 3b 03 	call	0x676	; 0x676 <get_key>
 860:	e5 e0       	ldi	r30, 0x05	; 5
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	ec 0f       	add	r30, r28
 866:	fd 1f       	adc	r31, r29
 868:	e0 0f       	add	r30, r16
 86a:	f1 1f       	adc	r31, r17
 86c:	80 83       	st	Z, r24
					Lcd4_Write_Char(lock_in[input_pass]);
 86e:	0e 94 c7 02 	call	0x58e	; 0x58e <Lcd4_Write_Char>
 872:	9f e9       	ldi	r25, 0x9F	; 159
 874:	26 e8       	ldi	r18, 0x86	; 134
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	20 40       	sbci	r18, 0x00	; 0
 87c:	80 40       	sbci	r24, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <__stack+0x19>
 880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
 882:	00 00       	nop
					_delay_ms(500);
					input_pass++;
 884:	0f 5f       	subi	r16, 0xFF	; 255
 886:	1f 4f       	sbci	r17, 0xFF	; 255
			Lcd4_Clear();
			Lcd4_Write_String("Your Passcode: ");
			Lcd4_Set_Cursor(2, 0);
			_delay_ms(200);
			
			while(input_pass < 4){
 888:	04 30       	cpi	r16, 0x04	; 4
 88a:	11 05       	cpc	r17, r1
 88c:	1c f3       	brlt	.-58     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
					Lcd4_Write_Char(lock_in[input_pass]);
					_delay_ms(500);
					input_pass++;
				}
			}
			Lcd4_Clear();
 88e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
			int i;
			for(i = 0; i<4; i++){
 892:	00 e0       	ldi	r16, 0x00	; 0
 894:	10 e0       	ldi	r17, 0x00	; 0
 896:	20 c0       	rjmp	.+64     	; 0x8d8 <__stack+0x79>
				if(lock[i] != lock_in[i]){
 898:	e1 e0       	ldi	r30, 0x01	; 1
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	ec 0f       	add	r30, r28
 89e:	fd 1f       	adc	r31, r29
 8a0:	e0 0f       	add	r30, r16
 8a2:	f1 1f       	adc	r31, r17
 8a4:	90 81       	ld	r25, Z
 8a6:	e5 e0       	ldi	r30, 0x05	; 5
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	ec 0f       	add	r30, r28
 8ac:	fd 1f       	adc	r31, r29
 8ae:	e0 0f       	add	r30, r16
 8b0:	f1 1f       	adc	r31, r17
 8b2:	80 81       	ld	r24, Z
 8b4:	98 17       	cp	r25, r24
 8b6:	71 f0       	breq	.+28     	; 0x8d4 <__stack+0x75>
					Lcd4_Write_String("Wrong Passcode!");
 8b8:	81 e8       	ldi	r24, 0x81	; 129
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
 8c0:	9f e3       	ldi	r25, 0x3F	; 63
 8c2:	2d e0       	ldi	r18, 0x0D	; 13
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	91 50       	subi	r25, 0x01	; 1
 8c8:	20 40       	sbci	r18, 0x00	; 0
 8ca:	80 40       	sbci	r24, 0x00	; 0
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <__stack+0x67>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <__stack+0x71>
 8d0:	00 00       	nop
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <__stack+0x7f>
					input_pass++;
				}
			}
			Lcd4_Clear();
			int i;
			for(i = 0; i<4; i++){
 8d4:	0f 5f       	subi	r16, 0xFF	; 255
 8d6:	1f 4f       	sbci	r17, 0xFF	; 255
 8d8:	04 30       	cpi	r16, 0x04	; 4
 8da:	11 05       	cpc	r17, r1
 8dc:	ec f2       	brlt	.-70     	; 0x898 <__stack+0x39>
					
					break;
				}
			}
			
			if(i == 4){
 8de:	04 30       	cpi	r16, 0x04	; 4
 8e0:	11 05       	cpc	r17, r1
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <__stack+0x87>
 8e4:	96 c0       	rjmp	.+300    	; 0xa12 <__stack+0x1b3>
				Lcd4_Write_String("Correct Passcode.");
 8e6:	81 e9       	ldi	r24, 0x91	; 145
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
				
				 //Rotates Motor Anticlockwise
				 PORTC |= 0b00000001;
 8ee:	85 b3       	in	r24, 0x15	; 21
 8f0:	81 60       	ori	r24, 0x01	; 1
 8f2:	85 bb       	out	0x15, r24	; 21
				 PORTC &= 0b11111101;
 8f4:	85 b3       	in	r24, 0x15	; 21
 8f6:	8d 7f       	andi	r24, 0xFD	; 253
 8f8:	85 bb       	out	0x15, r24	; 21
 8fa:	9f eb       	ldi	r25, 0xBF	; 191
 8fc:	27 e2       	ldi	r18, 0x27	; 39
 8fe:	89 e0       	ldi	r24, 0x09	; 9
 900:	91 50       	subi	r25, 0x01	; 1
 902:	20 40       	sbci	r18, 0x00	; 0
 904:	80 40       	sbci	r24, 0x00	; 0
 906:	e1 f7       	brne	.-8      	; 0x900 <__stack+0xa1>
 908:	00 c0       	rjmp	.+0      	; 0x90a <__stack+0xab>
 90a:	00 00       	nop
				 _delay_ms(3000);

				 //Stops Motor
				 PORTC &= 0b11111100;
 90c:	85 b3       	in	r24, 0x15	; 21
 90e:	8c 7f       	andi	r24, 0xFC	; 252
 910:	85 bb       	out	0x15, r24	; 21
 912:	9f e9       	ldi	r25, 0x9F	; 159
 914:	26 e8       	ldi	r18, 0x86	; 134
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	91 50       	subi	r25, 0x01	; 1
 91a:	20 40       	sbci	r18, 0x00	; 0
 91c:	80 40       	sbci	r24, 0x00	; 0
 91e:	e1 f7       	brne	.-8      	; 0x918 <__stack+0xb9>
 920:	00 c0       	rjmp	.+0      	; 0x922 <__stack+0xc3>
 922:	00 00       	nop
				 _delay_ms(500);
				 
				 Lcd4_Set_Cursor(2, 0);
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	82 e0       	ldi	r24, 0x02	; 2
 928:	0e 94 75 02 	call	0x4ea	; 0x4ea <Lcd4_Set_Cursor>
				 Lcd4_Write_String("Proceed To Vote");
 92c:	83 ea       	ldi	r24, 0xA3	; 163
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
 934:	9f e3       	ldi	r25, 0x3F	; 63
 936:	2d e0       	ldi	r18, 0x0D	; 13
 938:	83 e0       	ldi	r24, 0x03	; 3
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	20 40       	sbci	r18, 0x00	; 0
 93e:	80 40       	sbci	r24, 0x00	; 0
 940:	e1 f7       	brne	.-8      	; 0x93a <__stack+0xdb>
 942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0xe5>
 944:	00 00       	nop
				
				 _delay_ms(1000);
				 Lcd4_Clear();
 946:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
				  Lcd4_Write_String("Vote Now");
 94a:	83 eb       	ldi	r24, 0xB3	; 179
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
				 while(1){
					 
					 if(!(PINA & (1<<PINA0))){
 952:	c8 99       	sbic	0x19, 0	; 25
 954:	0a c0       	rjmp	.+20     	; 0x96a <__stack+0x10b>
						 count_a++;
 956:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count_a>
 95a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count_a+0x1>
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count_a+0x1>
 964:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count_a>
						 break;
 968:	23 c0       	rjmp	.+70     	; 0x9b0 <__stack+0x151>
					}
					
					else if(!(PINA & (1<<PINA1))){
 96a:	c9 99       	sbic	0x19, 1	; 25
 96c:	0a c0       	rjmp	.+20     	; 0x982 <__stack+0x123>
						count_b++;
 96e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count_b>
 972:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <count_b+0x1>
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <count_b+0x1>
 97c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count_b>
						break;
 980:	17 c0       	rjmp	.+46     	; 0x9b0 <__stack+0x151>
					}
					else if(!(PINA & (1<<PINA2))){
 982:	ca 99       	sbic	0x19, 2	; 25
 984:	0a c0       	rjmp	.+20     	; 0x99a <__stack+0x13b>
						count_c++;
 986:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count_c>
 98a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count_c+0x1>
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <count_c+0x1>
 994:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <count_c>
						break;
 998:	0b c0       	rjmp	.+22     	; 0x9b0 <__stack+0x151>
					}
					else if(!(PINA & (1<<PINA3))){
 99a:	cb 99       	sbic	0x19, 3	; 25
 99c:	da cf       	rjmp	.-76     	; 0x952 <__stack+0xf3>
						count_d++;
 99e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count_d>
 9a2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count_d+0x1>
 9a6:	01 96       	adiw	r24, 0x01	; 1
 9a8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <count_d+0x1>
 9ac:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <count_d>
					
					
					
				 }
				 
				 Lcd4_Clear();
 9b0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
				 Lcd4_Write_String("Thank You For Voting");
 9b4:	8c eb       	ldi	r24, 0xBC	; 188
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
				 
				 for(int i = 0; i<4; i++){
 9bc:	00 e0       	ldi	r16, 0x00	; 0
 9be:	10 e0       	ldi	r17, 0x00	; 0
 9c0:	0a c0       	rjmp	.+20     	; 0x9d6 <__stack+0x177>
 9c2:	87 ea       	ldi	r24, 0xA7	; 167
 9c4:	91 e6       	ldi	r25, 0x61	; 97
 9c6:	01 97       	sbiw	r24, 0x01	; 1
 9c8:	f1 f7       	brne	.-4      	; 0x9c6 <__stack+0x167>
 9ca:	00 c0       	rjmp	.+0      	; 0x9cc <__stack+0x16d>
 9cc:	00 00       	nop
					 _delay_ms(100);
					 Lcd4_Shift_Left();
 9ce:	0e 94 24 03 	call	0x648	; 0x648 <Lcd4_Shift_Left>
				 }
				 
				 Lcd4_Clear();
				 Lcd4_Write_String("Thank You For Voting");
				 
				 for(int i = 0; i<4; i++){
 9d2:	0f 5f       	subi	r16, 0xFF	; 255
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	04 30       	cpi	r16, 0x04	; 4
 9d8:	11 05       	cpc	r17, r1
 9da:	9c f3       	brlt	.-26     	; 0x9c2 <__stack+0x163>
					 _delay_ms(100);
					 Lcd4_Shift_Left();
				 }
				 
				 //Rotates Motor Clockwise
				  PORTC |= 0b00000010;
 9dc:	85 b3       	in	r24, 0x15	; 21
 9de:	82 60       	ori	r24, 0x02	; 2
 9e0:	85 bb       	out	0x15, r24	; 21
				  PORTC &= 0b11111110;
 9e2:	85 b3       	in	r24, 0x15	; 21
 9e4:	8e 7f       	andi	r24, 0xFE	; 254
 9e6:	85 bb       	out	0x15, r24	; 21
 9e8:	9f eb       	ldi	r25, 0xBF	; 191
 9ea:	27 e2       	ldi	r18, 0x27	; 39
 9ec:	89 e0       	ldi	r24, 0x09	; 9
 9ee:	91 50       	subi	r25, 0x01	; 1
 9f0:	20 40       	sbci	r18, 0x00	; 0
 9f2:	80 40       	sbci	r24, 0x00	; 0
 9f4:	e1 f7       	brne	.-8      	; 0x9ee <__stack+0x18f>
 9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <__stack+0x199>
 9f8:	00 00       	nop
				  _delay_ms(3000);

				  //Stops Motor
				  PORTC &= 0b11111100;
 9fa:	85 b3       	in	r24, 0x15	; 21
 9fc:	8c 7f       	andi	r24, 0xFC	; 252
 9fe:	85 bb       	out	0x15, r24	; 21
 a00:	9f e9       	ldi	r25, 0x9F	; 159
 a02:	26 e8       	ldi	r18, 0x86	; 134
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	91 50       	subi	r25, 0x01	; 1
 a08:	20 40       	sbci	r18, 0x00	; 0
 a0a:	80 40       	sbci	r24, 0x00	; 0
 a0c:	e1 f7       	brne	.-8      	; 0xa06 <__stack+0x1a7>
 a0e:	00 c0       	rjmp	.+0      	; 0xa10 <__stack+0x1b1>
 a10:	00 00       	nop
				  _delay_ms(500);

				 
			}
			
			Lcd4_Clear();
 a12:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
			count = 0;
 a16:	00 e0       	ldi	r16, 0x00	; 0
 a18:	10 e0       	ldi	r17, 0x00	; 0
 a1a:	ca ce       	rjmp	.-620    	; 0x7b0 <main+0x42>
		}
		
		
		}

		else if(end){
 a1c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 a20:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 a24:	89 2b       	or	r24, r25
 a26:	09 f4       	brne	.+2      	; 0xa2a <__stack+0x1cb>
 a28:	c3 ce       	rjmp	.-634    	; 0x7b0 <main+0x42>
			Lcd4_Clear();
 a2a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
			Lcd4_Write_String("Voting Ended");
 a2e:	81 ed       	ldi	r24, 0xD1	; 209
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
 a36:	9f e3       	ldi	r25, 0x3F	; 63
 a38:	2d e0       	ldi	r18, 0x0D	; 13
 a3a:	83 e0       	ldi	r24, 0x03	; 3
 a3c:	91 50       	subi	r25, 0x01	; 1
 a3e:	20 40       	sbci	r18, 0x00	; 0
 a40:	80 40       	sbci	r24, 0x00	; 0
 a42:	e1 f7       	brne	.-8      	; 0xa3c <__stack+0x1dd>
 a44:	00 c0       	rjmp	.+0      	; 0xa46 <__stack+0x1e7>
 a46:	00 00       	nop
			_delay_ms(1000);
			
			Lcd4_Clear();
 a48:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
			Lcd4_Write_String("Admin Passcode: ");
 a4c:	8e ed       	ldi	r24, 0xDE	; 222
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
			Lcd4_Set_Cursor(2, 0);
 a54:	60 e0       	ldi	r22, 0x00	; 0
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	0e 94 75 02 	call	0x4ea	; 0x4ea <Lcd4_Set_Cursor>
 a5c:	8f e4       	ldi	r24, 0x4F	; 79
 a5e:	93 ec       	ldi	r25, 0xC3	; 195
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	f1 f7       	brne	.-4      	; 0xa60 <__stack+0x201>
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <__stack+0x207>
 a66:	00 00       	nop
 a68:	00 e0       	ldi	r16, 0x00	; 0
 a6a:	10 e0       	ldi	r17, 0x00	; 0
 a6c:	1a c0       	rjmp	.+52     	; 0xaa2 <__stack+0x243>
			_delay_ms(200);
			while(input_pass < 4){
				if(get_key() != 0){
 a6e:	0e 94 3b 03 	call	0x676	; 0x676 <get_key>
 a72:	88 23       	and	r24, r24
 a74:	b1 f0       	breq	.+44     	; 0xaa2 <__stack+0x243>
					lock_in[input_pass] = get_key();
 a76:	0e 94 3b 03 	call	0x676	; 0x676 <get_key>
 a7a:	e5 e0       	ldi	r30, 0x05	; 5
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	ec 0f       	add	r30, r28
 a80:	fd 1f       	adc	r31, r29
 a82:	e0 0f       	add	r30, r16
 a84:	f1 1f       	adc	r31, r17
 a86:	80 83       	st	Z, r24
					Lcd4_Write_Char(lock_in[input_pass]);
 a88:	0e 94 c7 02 	call	0x58e	; 0x58e <Lcd4_Write_Char>
 a8c:	9f e9       	ldi	r25, 0x9F	; 159
 a8e:	26 e8       	ldi	r18, 0x86	; 134
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	91 50       	subi	r25, 0x01	; 1
 a94:	20 40       	sbci	r18, 0x00	; 0
 a96:	80 40       	sbci	r24, 0x00	; 0
 a98:	e1 f7       	brne	.-8      	; 0xa92 <__stack+0x233>
 a9a:	00 c0       	rjmp	.+0      	; 0xa9c <__stack+0x23d>
 a9c:	00 00       	nop
					_delay_ms(500);
					input_pass++;
 a9e:	0f 5f       	subi	r16, 0xFF	; 255
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
			
			Lcd4_Clear();
			Lcd4_Write_String("Admin Passcode: ");
			Lcd4_Set_Cursor(2, 0);
			_delay_ms(200);
			while(input_pass < 4){
 aa2:	04 30       	cpi	r16, 0x04	; 4
 aa4:	11 05       	cpc	r17, r1
 aa6:	1c f3       	brlt	.-58     	; 0xa6e <__stack+0x20f>
					Lcd4_Write_Char(lock_in[input_pass]);
					_delay_ms(500);
					input_pass++;
				}
			}
			Lcd4_Clear();
 aa8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
			int i;
			for(i = 0; i<4; i++){
 aac:	00 e0       	ldi	r16, 0x00	; 0
 aae:	10 e0       	ldi	r17, 0x00	; 0
 ab0:	20 c0       	rjmp	.+64     	; 0xaf2 <__stack+0x293>
				if(admin_lock[i] != lock_in[i]){
 ab2:	e9 e0       	ldi	r30, 0x09	; 9
 ab4:	f0 e0       	ldi	r31, 0x00	; 0
 ab6:	ec 0f       	add	r30, r28
 ab8:	fd 1f       	adc	r31, r29
 aba:	e0 0f       	add	r30, r16
 abc:	f1 1f       	adc	r31, r17
 abe:	90 81       	ld	r25, Z
 ac0:	e5 e0       	ldi	r30, 0x05	; 5
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	ec 0f       	add	r30, r28
 ac6:	fd 1f       	adc	r31, r29
 ac8:	e0 0f       	add	r30, r16
 aca:	f1 1f       	adc	r31, r17
 acc:	80 81       	ld	r24, Z
 ace:	98 17       	cp	r25, r24
 ad0:	71 f0       	breq	.+28     	; 0xaee <__stack+0x28f>
					Lcd4_Write_String("Wrong Passcode!");
 ad2:	81 e8       	ldi	r24, 0x81	; 129
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
 ada:	9f e3       	ldi	r25, 0x3F	; 63
 adc:	2d e0       	ldi	r18, 0x0D	; 13
 ade:	83 e0       	ldi	r24, 0x03	; 3
 ae0:	91 50       	subi	r25, 0x01	; 1
 ae2:	20 40       	sbci	r18, 0x00	; 0
 ae4:	80 40       	sbci	r24, 0x00	; 0
 ae6:	e1 f7       	brne	.-8      	; 0xae0 <__stack+0x281>
 ae8:	00 c0       	rjmp	.+0      	; 0xaea <__stack+0x28b>
 aea:	00 00       	nop
 aec:	05 c0       	rjmp	.+10     	; 0xaf8 <__stack+0x299>
					input_pass++;
				}
			}
			Lcd4_Clear();
			int i;
			for(i = 0; i<4; i++){
 aee:	0f 5f       	subi	r16, 0xFF	; 255
 af0:	1f 4f       	sbci	r17, 0xFF	; 255
 af2:	04 30       	cpi	r16, 0x04	; 4
 af4:	11 05       	cpc	r17, r1
 af6:	ec f2       	brlt	.-70     	; 0xab2 <__stack+0x253>
					
					break;
				}
			}
			
			if(i == 4){
 af8:	04 30       	cpi	r16, 0x04	; 4
 afa:	11 05       	cpc	r17, r1
 afc:	09 f0       	breq	.+2      	; 0xb00 <__stack+0x2a1>
 afe:	af c0       	rjmp	.+350    	; 0xc5e <__stack+0x3ff>
				Lcd4_Write_String("Correct Passcode.");
 b00:	81 e9       	ldi	r24, 0x91	; 145
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
				 //Rotates Motor Anticlockwise
				 PORTC |= 0b00000001;
 b08:	85 b3       	in	r24, 0x15	; 21
 b0a:	81 60       	ori	r24, 0x01	; 1
 b0c:	85 bb       	out	0x15, r24	; 21
				 PORTC &= 0b11111101;
 b0e:	85 b3       	in	r24, 0x15	; 21
 b10:	8d 7f       	andi	r24, 0xFD	; 253
 b12:	85 bb       	out	0x15, r24	; 21
 b14:	9f eb       	ldi	r25, 0xBF	; 191
 b16:	27 e2       	ldi	r18, 0x27	; 39
 b18:	89 e0       	ldi	r24, 0x09	; 9
 b1a:	91 50       	subi	r25, 0x01	; 1
 b1c:	20 40       	sbci	r18, 0x00	; 0
 b1e:	80 40       	sbci	r24, 0x00	; 0
 b20:	e1 f7       	brne	.-8      	; 0xb1a <__stack+0x2bb>
 b22:	00 c0       	rjmp	.+0      	; 0xb24 <__stack+0x2c5>
 b24:	00 00       	nop
				 _delay_ms(3000);

				 //Stops Motor
				 PORTC &= 0b11111100;
 b26:	85 b3       	in	r24, 0x15	; 21
 b28:	8c 7f       	andi	r24, 0xFC	; 252
 b2a:	85 bb       	out	0x15, r24	; 21
 b2c:	9f e9       	ldi	r25, 0x9F	; 159
 b2e:	26 e8       	ldi	r18, 0x86	; 134
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	91 50       	subi	r25, 0x01	; 1
 b34:	20 40       	sbci	r18, 0x00	; 0
 b36:	80 40       	sbci	r24, 0x00	; 0
 b38:	e1 f7       	brne	.-8      	; 0xb32 <__stack+0x2d3>
 b3a:	00 c0       	rjmp	.+0      	; 0xb3c <__stack+0x2dd>
 b3c:	00 00       	nop
				 _delay_ms(500);
					
				Lcd4_Clear();	
 b3e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
				Lcd4_Write_String("Show Votes?");
 b42:	8f ee       	ldi	r24, 0xEF	; 239
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
			while(1){

				if(!(PINA & (1<<PINA4))){
 b4a:	cc 99       	sbic	0x19, 4	; 25
 b4c:	fe cf       	rjmp	.-4      	; 0xb4a <__stack+0x2eb>
					Lcd4_Clear();
 b4e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
					Lcd4_Write_String("A: ");
 b52:	8b ef       	ldi	r24, 0xFB	; 251
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
					itoa(count_a, buff, 10);
 b5a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <buff>
 b5e:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <buff+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 b62:	4a e0       	ldi	r20, 0x0A	; 10
 b64:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count_a>
 b68:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count_a+0x1>
 b6c:	0e 94 3c 06 	call	0xc78	; 0xc78 <__itoa_ncheck>
					Lcd4_Write_String(buff);
 b70:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <buff>
 b74:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <buff+0x1>
 b78:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
					Lcd4_Set_Cursor(1,8);
 b7c:	68 e0       	ldi	r22, 0x08	; 8
 b7e:	81 e0       	ldi	r24, 0x01	; 1
 b80:	0e 94 75 02 	call	0x4ea	; 0x4ea <Lcd4_Set_Cursor>
					Lcd4_Write_String("B: ");
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
					itoa(count_b, buff, 10);
 b8c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <buff>
 b90:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <buff+0x1>
 b94:	4a e0       	ldi	r20, 0x0A	; 10
 b96:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count_b>
 b9a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <count_b+0x1>
 b9e:	0e 94 3c 06 	call	0xc78	; 0xc78 <__itoa_ncheck>
					Lcd4_Write_String(buff);
 ba2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <buff>
 ba6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <buff+0x1>
 baa:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
					Lcd4_Set_Cursor(2, 0);
 bae:	60 e0       	ldi	r22, 0x00	; 0
 bb0:	82 e0       	ldi	r24, 0x02	; 2
 bb2:	0e 94 75 02 	call	0x4ea	; 0x4ea <Lcd4_Set_Cursor>
					Lcd4_Write_String("C: ");
 bb6:	83 e0       	ldi	r24, 0x03	; 3
 bb8:	91 e0       	ldi	r25, 0x01	; 1
 bba:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
					itoa(count_c, buff, 10);
 bbe:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <buff>
 bc2:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <buff+0x1>
 bc6:	4a e0       	ldi	r20, 0x0A	; 10
 bc8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count_c>
 bcc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count_c+0x1>
 bd0:	0e 94 3c 06 	call	0xc78	; 0xc78 <__itoa_ncheck>
					Lcd4_Write_String(buff);
 bd4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <buff>
 bd8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <buff+0x1>
 bdc:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
					Lcd4_Set_Cursor(2,8);
 be0:	68 e0       	ldi	r22, 0x08	; 8
 be2:	82 e0       	ldi	r24, 0x02	; 2
 be4:	0e 94 75 02 	call	0x4ea	; 0x4ea <Lcd4_Set_Cursor>
					Lcd4_Write_String("D: ");
 be8:	87 e0       	ldi	r24, 0x07	; 7
 bea:	91 e0       	ldi	r25, 0x01	; 1
 bec:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
					itoa(count_d, buff, 10);
 bf0:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <buff>
 bf4:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <buff+0x1>
 bf8:	4a e0       	ldi	r20, 0x0A	; 10
 bfa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count_d>
 bfe:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count_d+0x1>
 c02:	0e 94 3c 06 	call	0xc78	; 0xc78 <__itoa_ncheck>
					Lcd4_Write_String(buff);
 c06:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <buff>
 c0a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <buff+0x1>
 c0e:	0e 94 0e 03 	call	0x61c	; 0x61c <Lcd4_Write_String>
 c12:	9f e7       	ldi	r25, 0x7F	; 127
 c14:	2a e1       	ldi	r18, 0x1A	; 26
 c16:	86 e0       	ldi	r24, 0x06	; 6
 c18:	91 50       	subi	r25, 0x01	; 1
 c1a:	20 40       	sbci	r18, 0x00	; 0
 c1c:	80 40       	sbci	r24, 0x00	; 0
 c1e:	e1 f7       	brne	.-8      	; 0xc18 <__stack+0x3b9>
 c20:	00 c0       	rjmp	.+0      	; 0xc22 <__stack+0x3c3>
 c22:	00 00       	nop
				}

			}
			
			//Rotates Motor Clockwise
			PORTC |= 0b00000010;
 c24:	85 b3       	in	r24, 0x15	; 21
 c26:	82 60       	ori	r24, 0x02	; 2
 c28:	85 bb       	out	0x15, r24	; 21
			PORTC &= 0b11111110;
 c2a:	85 b3       	in	r24, 0x15	; 21
 c2c:	8e 7f       	andi	r24, 0xFE	; 254
 c2e:	85 bb       	out	0x15, r24	; 21
 c30:	9f eb       	ldi	r25, 0xBF	; 191
 c32:	27 e2       	ldi	r18, 0x27	; 39
 c34:	89 e0       	ldi	r24, 0x09	; 9
 c36:	91 50       	subi	r25, 0x01	; 1
 c38:	20 40       	sbci	r18, 0x00	; 0
 c3a:	80 40       	sbci	r24, 0x00	; 0
 c3c:	e1 f7       	brne	.-8      	; 0xc36 <__stack+0x3d7>
 c3e:	00 c0       	rjmp	.+0      	; 0xc40 <__stack+0x3e1>
 c40:	00 00       	nop
			_delay_ms(3000);

			//Stops Motor
			PORTC &= 0b11111100;
 c42:	85 b3       	in	r24, 0x15	; 21
 c44:	8c 7f       	andi	r24, 0xFC	; 252
 c46:	85 bb       	out	0x15, r24	; 21
 c48:	9f e9       	ldi	r25, 0x9F	; 159
 c4a:	26 e8       	ldi	r18, 0x86	; 134
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	91 50       	subi	r25, 0x01	; 1
 c50:	20 40       	sbci	r18, 0x00	; 0
 c52:	80 40       	sbci	r24, 0x00	; 0
 c54:	e1 f7       	brne	.-8      	; 0xc4e <__stack+0x3ef>
 c56:	00 c0       	rjmp	.+0      	; 0xc58 <__stack+0x3f9>
 c58:	00 00       	nop
			_delay_ms(500);
			
			Lcd4_Clear();
 c5a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd4_Clear>
		}	

			break;
		}
	}
}
 c5e:	80 e0       	ldi	r24, 0x00	; 0
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	2c 96       	adiw	r28, 0x0c	; 12
 c64:	0f b6       	in	r0, 0x3f	; 63
 c66:	f8 94       	cli
 c68:	de bf       	out	0x3e, r29	; 62
 c6a:	0f be       	out	0x3f, r0	; 63
 c6c:	cd bf       	out	0x3d, r28	; 61
 c6e:	df 91       	pop	r29
 c70:	cf 91       	pop	r28
 c72:	1f 91       	pop	r17
 c74:	0f 91       	pop	r16
 c76:	08 95       	ret

00000c78 <__itoa_ncheck>:
 c78:	bb 27       	eor	r27, r27
 c7a:	4a 30       	cpi	r20, 0x0A	; 10
 c7c:	31 f4       	brne	.+12     	; 0xc8a <__itoa_ncheck+0x12>
 c7e:	99 23       	and	r25, r25
 c80:	22 f4       	brpl	.+8      	; 0xc8a <__itoa_ncheck+0x12>
 c82:	bd e2       	ldi	r27, 0x2D	; 45
 c84:	90 95       	com	r25
 c86:	81 95       	neg	r24
 c88:	9f 4f       	sbci	r25, 0xFF	; 255
 c8a:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__utoa_common>

00000c8e <__utoa_ncheck>:
 c8e:	bb 27       	eor	r27, r27

00000c90 <__utoa_common>:
 c90:	fb 01       	movw	r30, r22
 c92:	55 27       	eor	r21, r21
 c94:	aa 27       	eor	r26, r26
 c96:	88 0f       	add	r24, r24
 c98:	99 1f       	adc	r25, r25
 c9a:	aa 1f       	adc	r26, r26
 c9c:	a4 17       	cp	r26, r20
 c9e:	10 f0       	brcs	.+4      	; 0xca4 <__utoa_common+0x14>
 ca0:	a4 1b       	sub	r26, r20
 ca2:	83 95       	inc	r24
 ca4:	50 51       	subi	r21, 0x10	; 16
 ca6:	b9 f7       	brne	.-18     	; 0xc96 <__utoa_common+0x6>
 ca8:	a0 5d       	subi	r26, 0xD0	; 208
 caa:	aa 33       	cpi	r26, 0x3A	; 58
 cac:	08 f0       	brcs	.+2      	; 0xcb0 <__utoa_common+0x20>
 cae:	a9 5d       	subi	r26, 0xD9	; 217
 cb0:	a1 93       	st	Z+, r26
 cb2:	00 97       	sbiw	r24, 0x00	; 0
 cb4:	79 f7       	brne	.-34     	; 0xc94 <__utoa_common+0x4>
 cb6:	b1 11       	cpse	r27, r1
 cb8:	b1 93       	st	Z+, r27
 cba:	11 92       	st	Z+, r1
 cbc:	cb 01       	movw	r24, r22
 cbe:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <strrev>

00000cc2 <strrev>:
 cc2:	dc 01       	movw	r26, r24
 cc4:	fc 01       	movw	r30, r24
 cc6:	67 2f       	mov	r22, r23
 cc8:	71 91       	ld	r23, Z+
 cca:	77 23       	and	r23, r23
 ccc:	e1 f7       	brne	.-8      	; 0xcc6 <strrev+0x4>
 cce:	32 97       	sbiw	r30, 0x02	; 2
 cd0:	04 c0       	rjmp	.+8      	; 0xcda <strrev+0x18>
 cd2:	7c 91       	ld	r23, X
 cd4:	6d 93       	st	X+, r22
 cd6:	70 83       	st	Z, r23
 cd8:	62 91       	ld	r22, -Z
 cda:	ae 17       	cp	r26, r30
 cdc:	bf 07       	cpc	r27, r31
 cde:	c8 f3       	brcs	.-14     	; 0xcd2 <strrev+0x10>
 ce0:	08 95       	ret

00000ce2 <_exit>:
 ce2:	f8 94       	cli

00000ce4 <__stop_program>:
 ce4:	ff cf       	rjmp	.-2      	; 0xce4 <__stop_program>
